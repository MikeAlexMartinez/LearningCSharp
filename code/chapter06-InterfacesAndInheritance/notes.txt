Chapter 6

Covers:
  - setting up a class library and console application
  - simplifying methods with operators
  - defining local functions
  - raising and handling events
  - implementing interfaces
  - making types more reusable with generics
  - managing memory with reference and value types.
  - inheriting from classes
  - casting within inheritance hierarchies.
  - inheriting and extending .NET types

Events are described as things that happen to objects. They provide a way
for to exchange messages between two objects.

Calling methods using Delegates
  Uses function pointers.
  A delegate is a typesafe method pointer. In other words, a delegate is the memory address
  of a method that matches the same signature as the delegate so that it can be safely called.

Implementing Interfaces

If a type implements an interface it is making a promise to the rest of .NET
to support a certain feature.

Common interfaces:

IComparable     CompareTo(other)   This defines a comparison method that a type uses to 
                                   sort it's intances

IComparer       Compare(first,     Defines comparison method that a secondary type
                second)            implements in order to sort instances of a primary type

IDisposable     Dispose()          Defines a disposal method to release unmanaged
                                   resources.

IFormattable    ToString(format,   Deinfes a culture-aware method to format the value
                culture)           of an object into a string representaion.

IFormatter      Serialize(stream,    Defines methods to convert an object to and from
                object)              a stream of bytes for storage or transfer.
                Deserialize(stream)

IFormatProvider GetFormat(Type)    This defines methods to format inputs based on an
                                   a language and region.


Managing memory
There are two types of memory, stack and heap. Stack is fast but limited, heap is 
slow but plentiful.

class and struct both create types.

class => memory for object on heap => reference stored on stack.

struct => memory for object stored on stack.

If a struct uses types that are not structs themselves these values are
stored on the heap.

Most common struct types: 
  byte, sbyte, short, ushort, uint, long, ulong, float, double, decimal
  char, bool
  Color, Point, Rectangle

Advice from Microsoft:
  If all the fields int your type use 16 bytes or less of stack memory, your type
  only uses struct types for it's fields and you won't derive from the type, you
  should use a struct.

When using a type that implements IDisposable one can ensure that it is
removed by using the 'using' statement.

by adding the new keyword to a property declaration we let the compiler know we are intentionally hiding a property. Instead of hiding a property it can be recommended to overide
a method, providing the method can be over-riden (uses the virtual keyword.).

Many real-world API's require that you mark your methods with the virtual keyword to
allow methods to be overridden.

You can prevent inheritance and overriding by applying the sealed keyword.

Microsoft has applied extreme optimisiations to the string class so prevents overriding.

You can store an object in it's base class implicitly

To go the other way (base to child class) one needs to do so explicitly.

To handle casting exceptions we can use the 'is' keywrod to verify a type
is what we expect it to be.

You should use 'is' and 'as' when casting between derived types.

When defining your own exceptions you should use the same three constructors.